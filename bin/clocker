#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/clocker'
require_relative '../lib/clocker/version'

BINARY_NAME = $PROGRAM_NAME.split('/').last

def parse_options
  options = {
    show_messages: false
  }

  optparse = OptionParser.new do |opts|
    opts.banner = "Calculate how long a command or block of code takes to run\n"
    opts.banner += "usage: #{BINARY_NAME} COMMAND|BLOCK\n"

    opts.on('-m', '--message', 'Show start and ended messages') do |m|
      options[:show_messages] = m
    end

    opts.on('-v', '--version', 'Display version number and exit') do
      puts "#{Clocker::VERSION}"
      exit
    end

    opts.on('-h', '-?', '--help', 'Display this screen and exit') do
      puts opts
      exit
    end
  end

  optparse.parse!()

  return options
end

def print_error(error)
  case error
  when OptionParser::InvalidOption
    puts "#{BINARY_NAME} ERROR: illegal option #{error.args.join(' ')}"
  else
    puts "#{BINARY_NAME} ERROR: #{error}"
  end
end

begin
  options = parse_options

  if (ARGV.count > 0)
    command = ARGV.join(" ")
    c = Clocker.new(options)
    t = c.clock { eval(command) }
    puts
    puts "Clocked at #{t[:mins]} mins, #{t[:secs]} secs, and #{t[:ms]} ms"
  else
    puts "#{BINARY_NAME} ERROR: missing command or block"
  end
rescue => error
  print_error(error)
  exit(false)
end
